'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = Router;

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _ciAdapter = require('ci-adapter');

var _util = require('util');

var _uuid = require('uuid-1345');

var _uuid2 = _interopRequireDefault(_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function Router(adapter, options) {
  var router = _express2.default.Router();
  var model = adapter;

  router.get('/', function (req, res, next) {
    builds(adapter).then(function (builds) {
      return {
        builds: builds.map(function (build) {
          return build.id;
        }),
        latest: builds[0]
      };
    });
  });

  router.get('/builders', function (req, res, next) {
    builders(adapter).then(send(res), error(res));
  });

  router.get('/builds', function (req, res, next) {
    builds(adapter).then(send(res), error(res));
  });

  router.get('/latest', function (req, res, next) {
    builds(adapter).then(function (builds) {
      return builds[0];
    }).then(send(res), error(res));
  });

  return router;
}

function send(res) {
  return function (data) {
    return res.send(data);
  };
}

function error(res) {
  return function (err) {
    return res.status(500).send(err);
  };
}

function uuid(url) {
  return new Promise(function (resolve, reject) {
    _uuid2.default.v5({
      namespace: _uuid2.default.namespace.url,
      name: url
    }, function (err, uuid) {
      if (err) return reject(err);
      resolve(uuid);
    });
  });
}

function pmap(promise, callback) {
  return promise.then(function (list) {
    return Promise.all(list.map(callback));
  });
}

function pfmap(promise, callback) {
  return pmap(promise, callback).then(function (lists) {
    var _ref;

    return (_ref = []).concat.apply(_ref, _toConsumableArray(lists));
  });
}

function builders(adapter) {
  return pmap(adapter.getBuilders(), function (builder) {
    return pmap(adapter.getBuilds(builder), function (build) {
      return uuid(build.url);
    }).then(function (builds) {
      return uuid(builder.url).then(function (uuid) {
        return {
          id: uuid,
          name: builder.name,
          builds: builds
        };
      });
    });
  });
}

function builds(adapter) {
  return pfmap(adapter.getBuilders(), adapter.getBuilds).then(function (builds) {
    var sorted = builds.sort(function (a, b) {
      return b.end.getTime() - a.end.getTime();
    });
    console.log(sorted);

    return Promise.all(sorted.map(function (build) {
      return uuid(build.url).then(function (uuid) {
        return {
          id: uuid,
          name: build.name,
          number: build.number,
          state: build.state,
          start: build.start,
          end: build.end
        };
      });
    }));
  });
}
//# sourceMappingURL=data:application/json;base64,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O2FBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRTtLQUFBLENBQUUsQ0FBQztBQUMxRSxXQUFPLENBQUMsR0FBRyxDQUFFLE1BQU0sQ0FBRSxDQUFDOztBQUV0QixXQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssRUFBRTtBQUM3QyxhQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFO0FBQzFDLGVBQU87QUFDTCxZQUFFLEVBQUUsSUFBSTtBQUNSLGNBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtBQUNoQixnQkFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO0FBQ3BCLGVBQUssRUFBRSxLQUFLLENBQUMsS0FBSztBQUNsQixlQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7QUFDbEIsYUFBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1NBQ2YsQ0FBQztPQUNILENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQyxDQUFDO0dBQ0wsQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gJ2NpLWFkYXB0ZXInO1xuaW1wb3J0IHsgaW5oZXJpdHMgfSBmcm9tICd1dGlsJztcbmltcG9ydCBVVUlEIGZyb20gJ3V1aWQtMTM0NSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZXIoYWRhcHRlciwgb3B0aW9ucykge1xuICBjb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuICBjb25zdCBtb2RlbCA9IGFkYXB0ZXI7XG5cbiAgcm91dGVyLmdldCgnLycsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgIGJ1aWxkcyhhZGFwdGVyKS50aGVuKGZ1bmN0aW9uIChidWlsZHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJ1aWxkczogYnVpbGRzLm1hcChidWlsZCA9PiBidWlsZC5pZCksXG4gICAgICAgIGxhdGVzdDogYnVpbGRzWzBdXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcblxuICByb3V0ZXIuZ2V0KCcvYnVpbGRlcnMnLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgICBidWlsZGVycyhhZGFwdGVyKS50aGVuKHNlbmQocmVzKSwgZXJyb3IocmVzKSk7XG4gIH0pO1xuXG4gIHJvdXRlci5nZXQoJy9idWlsZHMnLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgICBidWlsZHMoYWRhcHRlcikudGhlbihzZW5kKHJlcyksIGVycm9yKHJlcykpO1xuICB9KTtcblxuICByb3V0ZXIuZ2V0KCcvbGF0ZXN0JywgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgYnVpbGRzKGFkYXB0ZXIpLnRoZW4oZnVuY3Rpb24gKGJ1aWxkcykge1xuICAgICAgcmV0dXJuIGJ1aWxkc1swXTtcbiAgICB9KS50aGVuKHNlbmQocmVzKSwgZXJyb3IocmVzKSk7XG4gIH0pO1xuXG4gIHJldHVybiByb3V0ZXI7XG59XG5cbmZ1bmN0aW9uIHNlbmQocmVzKSB7XG4gIHJldHVybiBkYXRhID0+IHJlcy5zZW5kKGRhdGEpO1xufVxuXG5mdW5jdGlvbiBlcnJvcihyZXMpIHtcbiAgcmV0dXJuIGVyciA9PiByZXMuc3RhdHVzKDUwMCkuc2VuZChlcnIpO1xufVxuXG5mdW5jdGlvbiB1dWlkKHVybCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIFVVSUQudjUoe1xuICAgICAgbmFtZXNwYWNlOiBVVUlELm5hbWVzcGFjZS51cmwsXG4gICAgICBuYW1lOiB1cmxcbiAgICB9LCBmdW5jdGlvbiAoZXJyLCB1dWlkKSB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICByZXNvbHZlKHV1aWQpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuXG5mdW5jdGlvbiBwbWFwKHByb21pc2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBwcm9taXNlLnRoZW4obGlzdCA9PiBQcm9taXNlLmFsbChsaXN0Lm1hcChjYWxsYmFjaykpKTtcbn1cblxuZnVuY3Rpb24gcGZtYXAocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHBtYXAocHJvbWlzZSwgY2FsbGJhY2spLnRoZW4obGlzdHMgPT4gW10uY29uY2F0KCAuLi5saXN0cyApKTtcbn1cblxuZnVuY3Rpb24gYnVpbGRlcnMoYWRhcHRlcikge1xuICByZXR1cm4gcG1hcChhZGFwdGVyLmdldEJ1aWxkZXJzKCksIGZ1bmN0aW9uIChidWlsZGVyKSB7XG4gICAgcmV0dXJuIHBtYXAoYWRhcHRlci5nZXRCdWlsZHMoYnVpbGRlciksIGZ1bmN0aW9uIChidWlsZCkge1xuICAgICAgcmV0dXJuIHV1aWQoYnVpbGQudXJsKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChidWlsZHMpIHtcbiAgICAgIHJldHVybiB1dWlkKGJ1aWxkZXIudXJsKS50aGVuKGZ1bmN0aW9uICh1dWlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IHV1aWQsXG4gICAgICAgICAgbmFtZTogYnVpbGRlci5uYW1lLFxuICAgICAgICAgIGJ1aWxkczogYnVpbGRzXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkcyhhZGFwdGVyKSB7XG4gIHJldHVybiBwZm1hcChhZGFwdGVyLmdldEJ1aWxkZXJzKCksIGFkYXB0ZXIuZ2V0QnVpbGRzKS50aGVuKGZ1bmN0aW9uIChidWlsZHMpIHtcbiAgICBjb25zdCBzb3J0ZWQgPSBidWlsZHMuc29ydCggKGEsIGIpID0+IGIuZW5kLmdldFRpbWUoKSAtIGEuZW5kLmdldFRpbWUoKSApO1xuICAgIGNvbnNvbGUubG9nKCBzb3J0ZWQgKTtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChzb3J0ZWQubWFwKGZ1bmN0aW9uIChidWlsZCkge1xuICAgICAgcmV0dXJuIHV1aWQoYnVpbGQudXJsKS50aGVuKGZ1bmN0aW9uICh1dWlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQ6IHV1aWQsXG4gICAgICAgICAgbmFtZTogYnVpbGQubmFtZSxcbiAgICAgICAgICBudW1iZXI6IGJ1aWxkLm51bWJlcixcbiAgICAgICAgICBzdGF0ZTogYnVpbGQuc3RhdGUsXG4gICAgICAgICAgc3RhcnQ6IGJ1aWxkLnN0YXJ0LFxuICAgICAgICAgIGVuZDogYnVpbGQuZW5kXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH0pO1xufVxuIl19