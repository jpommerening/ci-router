'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = Router;

var _ciAdapter = require('ci-adapter');

var _util = require('util');

var _url = require('url');

var _id = require('./id');

var _model = require('./model');

function Router(adapter, options) {
  var model = (0, _model.Model)(adapter, {
    id: {
      get: function get() {
        return (0, _id.id)(this.data);
      }
    }
  });
  var handlers = {
    '/': function _(req, res, next) {
      var builders = model.builders();
      var builds = model.builds();

      Promise.all([builders.then(function (builders) {
        return Promise.all(builders.map(function (builder) {
          return builder.id;
        }));
      }), builds.then(function (builds) {
        return Promise.all(builds.map(function (build) {
          return build.id;
        }));
      }), builds.then(function (builds) {
        return builds.filter(function (build) {
          return build.state === _ciAdapter.state.PENDING;
        });
      })]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3);

        var builders = _ref2[0];
        var builds = _ref2[1];
        var pending = _ref2[2];
        return { builders: builders, builds: builds, pending: pending };
      }).then(send(req, res), error(res));
    },
    '/builders': function builders(req, res, next) {
      model.builders().then(function (builders) {
        return Promise.all(builders.map(builderData(req)));
      }).then(send(req, res), error(res));
    },
    '/builds': function builds(req, res, next) {
      model.builds().then(function (builds) {
        return Promise.all(builds.map(buildData(req)));
      }).then(send(req, res), error(res));
    },
    '/latest': function latest(req, res, next) {
      model.builds().then(function (builds) {
        return buildData(req)(builds[0]);
      }).then(send(req, res), error(res));
    }
  };

  return function (req, res, next) {
    if (req.method === 'GET' && req.url in handlers) {
      return handlers[req.url](req, res, next);
    } else {
      return next();
    }
  };
}

function getBaseUrl(req) {
  function first(string) {
    return string && string.split(/\s*,\s*/)[0];
  }

  var proto = first(req.headers['x-forwarded-proto']) || (req.socket.encrypted ? 'https' : 'http');
  var host = first(req.headers['x-forwarded-host']) || req.headers.host;
  var base = req.baseUrl || '';
  return proto + '://' + host + base;
}

function builderData(req) {
  var endpoint = getBaseUrl(req);
  return function (builder) {
    return builder.id.then(function (id) {
      var url = endpoint + '/builder/' + id;
      var urls = [builder.data.url].concat(builder.data.data.urls || []);
      var data = Object.assign({}, builder.data, { url: url, data: { urls: urls } });
      return data;
    });
  };
}

function buildData(req) {
  var endpoint = getBaseUrl(req);
  return function (build) {
    return build.id.then(function (id) {
      var url = endpoint + '/builder/' + id;
      var urls = [build.data.url].concat(build.data.data.urls || []);
      var data = Object.assign({}, build.data, { url: url, data: { urls: urls } });
      return data;
    });
  };
}

function send(req, res) {
  var url = req.parsedUrl || (0, _url.parse)(req.url, true);
  var pretty = !!url.query.pretty;
  return function (data) {
    res.setHeader('Content-Type', 'application/json');
    res.write(JSON.stringify(data, null, pretty && 2));
    res.end();
  };
  return function (data) {
    return res.json(data);
  };
}

function error(res) {
  return function (err) {
    res.statusCode = 500;
    res.setHeader('Content-Type', 'application/json');
    res.write(JSON.stringify({ message: err.toString() }));
    res.end();
  };
}
//# sourceMappingURL=data:application/json;base64,