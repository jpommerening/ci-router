'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = Router;

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _ciAdapter = require('ci-adapter');

var _util = require('util');

var _id = require('./id');

var _model = require('./model');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function Router(adapter, options) {
  var router = _express2.default.Router();
  var model = (0, _model.Model)(adapter, {
    id: {
      get: function get() {
        return this.data.then(_id.id);
      }
    },
    url: {
      get: function get() {
        if (this instanceof _model.Build) {
          return this.id.then(function (id) {
            return '/builds/' + id;
          });
        }
        if (this instanceof _model.Builder) {
          return this.id.then(function (id) {
            return '/builders/' + id;
          });
        }
      }
    }
  });

  router.get('/', function (req, res, next) {
    builds(adapter).then(function (builds) {
      return {
        builds: builds.map(function (build) {
          return build.id;
        }),
        latest: builds[0]
      };
    });
  });

  router.get('/builders', function (req, res, next) {
    model.builders().then(send(res), error(res));
  });

  router.get('/builds', function (req, res, next) {
    model.builds().then(send(res), error(res));
  });

  router.get('/latest', function (req, res, next) {
    builds(adapter).then(function (builds) {
      return builds[0];
    }).then(send(res), error(res));
  });

  return router;
}

function send(res) {
  return function (data) {
    return res.send(data);
  };
}

function error(res) {
  return function (err) {
    res.status(500);
    res.send({
      message: err.toString()
    });
    console.log(err);
  };
}

function pmap(promise, callback) {
  return promise.then(function (list) {
    return Promise.all(list.map(callback));
  });
}

function pfmap(promise, callback) {
  return pmap(promise, callback).then(function (lists) {
    var _ref;

    return (_ref = []).concat.apply(_ref, _toConsumableArray(lists));
  });
}

function builders(adapter) {
  return pmap(adapter.getBuilders(), function (builder) {
    return pmap(adapter.getBuilds(builder), function (build) {
      return (0, _id.id)(build);
    }).then(function (builds) {
      return (0, _id.id)(builder).then(function (id) {
        return {
          id: id,
          html_url: builder.html_url,
          name: builder.name,
          builds: builds
        };
      });
    });
  });
}

function builds(adapter) {
  return pfmap(adapter.getBuilders(), adapter.getBuilds).then(function (builds) {
    var now = new Date();
    var sorted = builds.sort(function (a, b) {
      return (b.end || now).getTime() - (a.end || now).getTime();
    });

    return Promise.all(sorted.map(function (build) {
      return (0, _id.id)(build).then(function (id) {
        return {
          id: id,
          html_url: build.html_url,
          name: build.name,
          number: build.number,
          state: build.state,
          start: build.start,
          end: build.end
        };
      });
    }));
  });
}
//# sourceMappingURL=data:application/json;base64,